{"ast":null,"code":"var _jsxFileName = \"/Users/Z00C53N/thinkful/react-projects/Module-13/src/components/cards/FlipCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport CreateButton from '../buttons/CreateButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FlipCard({\n  cards\n}) {\n  _s();\n  const initialCardState = {\n    id: 0,\n    front: \"\",\n    back: \"\",\n    deckId: 0\n  };\n  const sortedCards = cards.sort((cardA, cardB) => cardA.id - cardB.id);\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  const [currentCard, setCurrentCard] = useState({\n    ...initialCardState\n  });\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [displayedCardIndex, setDisplayedCardIndex] = useState(1);\n  const [cardIsFlipped, setCardIsFlipped] = useState(true);\n  const [endOfCardDeck, setEndOfCardDeck] = useState(false);\n  useEffect(() => {\n    if (sortedCards.length > 2) {\n      setCardIsFlipped(true);\n    }\n    setCurrentCard(sortedCards[currentCardIndex]);\n  }, [sortedCards, currentCardIndex]);\n  const cardFlipHandler = () => {\n    cardIsFlipped ? setCardIsFlipped(false) : setCardIsFlipped(true);\n  };\n  const nextCardHandler = () => {\n    setCardIsFlipped(false);\n    incrementCurrentCardAndIndexes();\n    if (cards.length <= displayedCardIndex) {\n      setEndOfCardDeck(true);\n      resetCardsTofirstIndexPrompt();\n    }\n    ;\n  };\n  function incrementCurrentCardAndIndexes() {\n    setCurrentCardIndex(currentIndex => currentIndex + 1);\n    setDisplayedCardIndex(currentDisplayedIndex => currentDisplayedIndex + 1);\n    setCurrentCard(sortedCards[currentCardIndex + 1]);\n  }\n  ;\n  function resetCardsTofirstIndexPrompt() {\n    if (window.confirm(\"Restart cards?\")) {\n      resetCardIndexesToInitialState();\n      resetEndOfDeckToInitialState();\n      changeRouteOnConfirmation(true);\n    } else {\n      resetEndOfDeckToInitialState();\n      changeRouteOnConfirmation(false);\n    }\n  }\n  ;\n  function resetCardIndexesToInitialState() {\n    setCurrentCardIndex(0);\n    setDisplayedCardIndex(1);\n    setCurrentCard(sortedCards[currentCardIndex]);\n  }\n  ;\n  function resetEndOfDeckToInitialState() {\n    return setEndOfCardDeck(false);\n  }\n  function changeRouteOnConfirmation(confirm) {\n    if (confirm) {\n      history.push(`/decks/${deckId}/study`);\n    } else {\n      history.push(\"/\");\n    }\n  }\n  ;\n  if (cards.length > 2 && currentCard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Card \", displayedCardIndex, \" of \", cards.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), cardIsFlipped ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentCard.front\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentCard.back\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 63\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: cardFlipHandler,\n            children: \"Flip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), !cardIsFlipped ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-1\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: nextCardHandler,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n  ;\n  if (!endOfCardDeck && cards.length <= 2) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Not enough cards.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You need at least 3 cards to study a deck. There \", cards.length < 2 ? \"is\" : \"are\", \" \", cards.length, \" \", cards.length < 2 ? \"card\" : \"cards\", \" currently in this deck.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateButton, {\n        routePath: `/decks/${deckId}/cards/new`,\n        buttonFunction: \"Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n  ;\n  if (endOfCardDeck) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Great work!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You've reached the end of the deck.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You can restart the cards by clicking 'OK'.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Clicking 'Cancel' will return you to the list of available decks.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 12\n  }, this);\n}\n_s(FlipCard, \"clKydvNMgEN1P0lYVYJqH6wz5xQ=\", false, function () {\n  return [useParams, useHistory];\n});\n_c = FlipCard;\n;\nvar _c;\n$RefreshReg$(_c, \"FlipCard\");","map":{"version":3,"names":["React","useEffect","useState","useHistory","useParams","CreateButton","jsxDEV","_jsxDEV","Fragment","_Fragment","FlipCard","cards","_s","initialCardState","id","front","back","deckId","sortedCards","sort","cardA","cardB","history","currentCard","setCurrentCard","currentCardIndex","setCurrentCardIndex","displayedCardIndex","setDisplayedCardIndex","cardIsFlipped","setCardIsFlipped","endOfCardDeck","setEndOfCardDeck","length","cardFlipHandler","nextCardHandler","incrementCurrentCardAndIndexes","resetCardsTofirstIndexPrompt","currentIndex","currentDisplayedIndex","window","confirm","resetCardIndexesToInitialState","resetEndOfDeckToInitialState","changeRouteOnConfirmation","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","routePath","buttonFunction","_c","$RefreshReg$"],"sources":["/Users/Z00C53N/thinkful/react-projects/Module-13/src/components/cards/FlipCard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport CreateButton from '../buttons/CreateButton';\n\nexport default function FlipCard({ cards }) {\n    const initialCardState = {\n        id: 0,\n        front: \"\",\n        back: \"\",\n        deckId: 0,\n    };\n\n    const sortedCards = cards.sort((cardA, cardB) => cardA.id - cardB.id);\n\n    const { deckId } = useParams();\n    const history = useHistory();\n\n    const [ currentCard, setCurrentCard ] = useState({...initialCardState});\n    const [ currentCardIndex, setCurrentCardIndex ] = useState(0);\n    const [ displayedCardIndex, setDisplayedCardIndex ] = useState(1);\n    const [ cardIsFlipped, setCardIsFlipped ] = useState(true);\n    const [ endOfCardDeck, setEndOfCardDeck ] = useState(false);\n\n    useEffect(() => {\n        if (sortedCards.length > 2) {\n            setCardIsFlipped(true);\n        }\n        setCurrentCard(sortedCards[currentCardIndex]);\n    }, [sortedCards, currentCardIndex]);\n    \n    const cardFlipHandler = () => {\n        (cardIsFlipped ? setCardIsFlipped(false) : setCardIsFlipped(true));\n    };\n\n    const nextCardHandler = () => {\n        setCardIsFlipped(false);\n        incrementCurrentCardAndIndexes();\n        if(cards.length <= displayedCardIndex) {\n            setEndOfCardDeck(true);\n            resetCardsTofirstIndexPrompt();\n        };\n    };\n\n    function incrementCurrentCardAndIndexes() {\n        setCurrentCardIndex((currentIndex) => currentIndex+ 1);\n        setDisplayedCardIndex((currentDisplayedIndex) => currentDisplayedIndex+ 1);\n        setCurrentCard(sortedCards[currentCardIndex + 1]);\n    };\n\n    function resetCardsTofirstIndexPrompt() {\n        if (window.confirm(\"Restart cards?\")) {\n            resetCardIndexesToInitialState();\n            resetEndOfDeckToInitialState();\n            changeRouteOnConfirmation(true);\n        } else {\n            resetEndOfDeckToInitialState();\n            changeRouteOnConfirmation(false);\n        }\n    };\n\n    function resetCardIndexesToInitialState() {\n        setCurrentCardIndex(0);\n        setDisplayedCardIndex(1);\n        setCurrentCard(sortedCards[currentCardIndex]);\n    };\n\n    function resetEndOfDeckToInitialState() {\n        return setEndOfCardDeck(false);\n    }\n\n    function changeRouteOnConfirmation(confirm) {\n        if (confirm) {\n            history.push(`/decks/${deckId}/study`);\n        } else {\n            history.push(\"/\");\n        }\n    };\n\n    if (cards.length > 2 && currentCard) {\n        return (\n            <div className=\"container\">\n                <h4>Card {displayedCardIndex} of {cards.length}</h4>\n                {cardIsFlipped ? <p>{currentCard.front}</p> : <p>{currentCard.back}</p>}\n                <div className=\"row\">\n                    <div>\n                        <button className=\"btn btn-secondary\" onClick={cardFlipHandler}>Flip</button>\n                    </div>\n                    {!cardIsFlipped ? (\n                        <div className=\"p-1\">\n                            <button className=\"btn btn-secondary\" onClick={nextCardHandler}>Next</button>\n                        </div>\n                        ) : (\n                        null\n                        )}\n                </div>\n            </div>\n        );\n    };\n    if (!endOfCardDeck && cards.length <= 2) {\n        return (\n            <>\n                <h4>Not enough cards.</h4>\n                <p>You need at least 3 cards to study a deck. There {cards.length < 2 ? \"is\" : \"are\"} {cards.length} {cards.length < 2 ? \"card\" : \"cards\"} currently in this deck.</p>\n                <CreateButton\n                    routePath={`/decks/${deckId}/cards/new`}\n                    buttonFunction={\"Card\"}\n                />\n            </>\n        );\n    };\n    if (endOfCardDeck) {\n        return (\n            <>\n            <h5>Great work!</h5>\n            <p>You've reached the end of the deck.</p>\n            <p>You can restart the cards by clicking 'OK'.</p>\n            <p>Clicking 'Cancel' will return you to the list of available decks.</p>\n            </>\n        );\n    }\n    return <p>Loading...</p>\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}